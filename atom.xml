<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一纸墨迹</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ku-cat.com/"/>
  <updated>2018-05-03T10:21:46.931Z</updated>
  <id>http://blog.ku-cat.com/</id>
  
  <author>
    <name>Ben</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Paxos</title>
    <link href="http://blog.ku-cat.com/2018/05/03/Paxos/"/>
    <id>http://blog.ku-cat.com/2018/05/03/Paxos/</id>
    <published>2018-05-03T10:21:46.000Z</published>
    <updated>2018-05-03T10:21:46.931Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>django授权Authentication</title>
    <link href="http://blog.ku-cat.com/2018/05/03/python-django-Authentication/"/>
    <id>http://blog.ku-cat.com/2018/05/03/python-django-Authentication/</id>
    <published>2018-05-03T05:13:59.000Z</published>
    <updated>2018-05-03T15:34:25.404Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.django-rest-framework.org/api-guide/authentication/" target="_blank" rel="noopener">官方文档原文</a></p><h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><blockquote><p>Auth needs to be pluggable.</p></blockquote><p>身份验证是将传入请求与一组识别凭证（例如请求来自的用户或其签名的令牌）相关联的机制。然后，权限和限制策略可以使用这些凭据来确定请求是否应该被允许.</p><p>REST框架提供了许多开箱即用的身份验证方案，还允许您实施自定义方案。<br>在许可和节流检查发生之前，在允许任何其他代码继续之前，验证总是在视图的开始运行。</p><p><code>request.user</code>属性通常会设置为<code>contrib.auth</code>包的<code>User</code>类的一个实例。<br><code>request.auth</code>属性用于任何其他身份验证信息，例如，它可以用来表示请求已签名的身份验证令牌。</p><blockquote><p>注意：不要忘记，身份验证本身不允许或禁止传入请求，它只是标识请求的凭据。<br>有关如何为您的API设置权限策略的信息，<a href="http://www.django-rest-framework.org/api-guide/permissions/" target="_blank" rel="noopener">请参阅权限文档</a>。</p></blockquote><h2 id="身份验证是如何决定的"><a href="#身份验证是如何决定的" class="headerlink" title="身份验证是如何决定的"></a>身份验证是如何决定的</h2><p>认证方案总是被定义为一个类的列表。 REST框架将尝试使用列表中的每个类进行认证，并将使用成功认证的第一个类的返回值设置<code>request.use</code>r和<code>request.auth</code>。</p><p>如果没有类进行身份验证：<br><code>request.user</code>将被设置为<code>django.contrib.auth.models.AnonymousUser</code>的实例。<br><code>request.auth</code>将被设置为<code>None</code>。</p><p>可以使用<code>UNAUTHENTICATED_USER</code>和<code>UNAUTHENTICATED_TOKEN</code>设置修改未经身份验证的请求的<code>request.user</code>和<code>request.auth</code>的值。</p><h2 id="设置身份验证方案"><a href="#设置身份验证方案" class="headerlink" title="设置身份验证方案"></a>设置身份验证方案</h2><p>默认的认证方案可以使用<code>DEFAULT_AUTHENTICATION_CLASSES</code>进行全局设置。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以基于<code>APIView</code>视图类在视图或视图集上进行设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication, BasicAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    authentication_classes = (SessionAuthentication, BasicAuthentication)</span><br><span class="line">    permission_classes = (IsAuthenticated,)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">'user'</span>: unicode(request.user),  <span class="comment"># `django.contrib.auth.User` instance.</span></span><br><span class="line">            <span class="string">'auth'</span>: unicode(request.auth),  <span class="comment"># None</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure><p>或者，如果你使用的是基于功能的视图<code>@api_view</code>装饰器方法，可以像下面一样设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@api_view(['GET'])</span></span><br><span class="line"><span class="meta">@authentication_classes((SessionAuthentication, BasicAuthentication))</span></span><br><span class="line"><span class="meta">@permission_classes((IsAuthenticated,))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example_view</span><span class="params">(request, format=None)</span>:</span></span><br><span class="line">    content = &#123;</span><br><span class="line">        <span class="string">'user'</span>: unicode(request.user),  <span class="comment"># `django.contrib.auth.User` instance.</span></span><br><span class="line">        <span class="string">'auth'</span>: unicode(request.auth),  <span class="comment"># None</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure><h2 id="未经授权和禁止的响应"><a href="#未经授权和禁止的响应" class="headerlink" title="未经授权和禁止的响应"></a>未经授权和禁止的响应</h2><p>当未经身份验证的请求被拒绝时，有两种不同的错误代码比较合适。</p><ul><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2" target="_blank" rel="noopener">HTTP 401 Unauthorized</a></li><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.4" target="_blank" rel="noopener">HTTP 403 Permission Denied</a></li></ul><p>HTTP 401 responses必须始终包括一个<code>WWW-Authenticate</code>报头，它指示客户端如何进行身份验证。 HTTP 403 responses 不包括 <code>WWW-Authenticate</code> 报头。</p><p>response响应类型取决于选用的认证方案。虽然可以使用多种的认证方案，但是response响应类型只能决定使用一种。在视图上第一个被使用的认证类决定了响应类型。</p><p>另外请注意，当请求可以成功进行身份验证时，仍然会被拒绝执行请求的权限，在这种情况下，不管身份验证方案如何，将始终使用403权限拒绝响应。</p><h2 id="Apache-mod-wsgi-特定的配置"><a href="#Apache-mod-wsgi-特定的配置" class="headerlink" title="Apache mod_wsgi 特定的配置"></a>Apache mod_wsgi 特定的配置</h2><p>Note that if deploying to Apache using mod_wsgi, the authorization header is not passed through to a WSGI application by default, as it is assumed that authentication will be handled by Apache, rather than at an application level.</p><p>If you are deploying to Apache, and using any non-session based authentication, you will need to explicitly configure mod_wsgi to pass the required headers through to the application. This can be done by specifying the WSGIPassAuthorization directive in the appropriate context and setting it to ‘On’.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># this can go in either server config, virtual host, directory or .htaccess</span></span><br><span class="line">WSGIPassAuthorization On</span><br></pre></td></tr></table></figure><h2 id="API-参考-（API-Reference）"><a href="#API-参考-（API-Reference）" class="headerlink" title="API 参考 （API Reference）"></a>API 参考 （API Reference）</h2><h3 id="基本认证方案（BasicAuthentication）"><a href="#基本认证方案（BasicAuthentication）" class="headerlink" title="基本认证方案（BasicAuthentication）"></a>基本认证方案（BasicAuthentication）</h3><p>该认证方案使用 HTTP基本认证( <a href="https://tools.ietf.org/html/rfc2617" target="_blank" rel="noopener">HTTP Basic Authentication</a>)，并根据用户的用户名和密码进行签名。基本认证通常只适用于测试。</p><p>如果成功认证，则基本身份验证提供以下凭据(credentials)。</p><ul><li><code>request.user</code>是Django的<code>User</code>类的实例。</li><li><code>request.auth</code>的值为 <strong>None</strong>。</li></ul><p>权限被拒绝的未认请求响应结果是 <code>HTTP 401 Unauthorized</code>和一个适合的 <code>WWW-Authenticate</code> 报头。示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WWW-Authenticate: Basic realm=&quot;api&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果你在你的产品中使用基本认证，那么你必须确保你的API仅在Https协议下使用。您还应该确保您的API客户端将始终在登录时重新请求用户名和密码，并且永远不会将这些详细信息存储到持久性存储中。</p></blockquote><h3 id="Token认证方案（TokenAuthentication）"><a href="#Token认证方案（TokenAuthentication）" class="headerlink" title="Token认证方案（TokenAuthentication）"></a>Token认证方案（TokenAuthentication）</h3><p>该身份验证方案使用基于简单令牌的HTTP认证(<strong>token-based HTTP Authentication</strong>)方案。Token认证方案适用于客户端/服务端设置，像本机桌面（native desktop）和移动客户端。</p><p>要使用 <code>TokenAuthentication</code>认证方案，在需要认证的类（ <a href="http://www.django-rest-framework.org/api-guide/authentication/#setting-the-authentication-scheme" target="_blank" rel="noopener">configure the authentication classes</a>）里面包含<code>TokenAuthentication</code>并且在<code>setting.py</code>配置中的<code>INSTALLED_APPS</code>项添加<code>rest_framework.authtoken</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'rest_framework.authtoken'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>注意：添加以上的配置后，需要运行 <code>run manage.py migrate</code> 安装数据更新，这<code>rest_framework.authtoken</code> 提供了 Django 数据库牵移（migrations）</p></blockquote><p>您还需要为您的用户创建令牌。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authtoken.models <span class="keyword">import</span> Token</span><br><span class="line"></span><br><span class="line">token = Token.objects.create(user=...)</span><br><span class="line"><span class="keyword">print</span> token.key</span><br></pre></td></tr></table></figure><p>对于客户端进行身份验证，令牌密钥应包含在授权HTTP头中。关键字应以字符串文字<code>Token</code>为前缀，用空格分隔两个字符串。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果你想在报头中使用不同的关键字，像<code>Bearer</code>, 很简单，只需在<code>TokenAuthentication</code>子类中设置关键字变量。</p></blockquote><p>如果成功认证，<code>TokenAuthentication</code>提供下面的认证。</p><ul><li><code>request.user</code> 是Django的<code>User</code>的实例</li><li><code>request.auth</code> 是<code>rest_framework.authtoken.models.Token</code>的实例</li></ul><p>由于没有认证，无权访问的请求返回的响应是 <code>HTTP 401 Unauthorized</code> 和 包含 <code>WWW-Authenticate</code>的报头。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WWW-Authenticate：Token</span><br></pre></td></tr></table></figure><p>可以使用<code>curl</code>命令行工具测试<code>TokenAuthentication</code> 的API。比如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET http://127.0.0.1:8000/api/example/ -H <span class="string">'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b'</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果在你的产品中使用TokenAuthentication认证方案，必须确保你的API仅在https下使用。</p></blockquote><h4 id="如何产生Token"><a href="#如何产生Token" class="headerlink" title="如何产生Token"></a>如何产生Token</h4><h5 id="使用信号（By-using-signals）"><a href="#使用信号（By-using-signals）" class="headerlink" title="使用信号（By using signals）"></a>使用信号（By using signals）</h5><p>如果你希望每个用户自动（automatically）的生成（generated）他们自己的Token，只要捕捉<code>User</code>的<code>post_save</code>信号（signal）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_save</span><br><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</span><br><span class="line"><span class="keyword">from</span> rest_framework.authtoken.models <span class="keyword">import</span> Token</span><br><span class="line"></span><br><span class="line"><span class="meta">@receiver(post_save, sender=settings.AUTH_USER_MODEL)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_auth_token</span><span class="params">(sender, instance=None, created=False, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> created:</span><br><span class="line">        Token.objects.create(user=instance)</span><br></pre></td></tr></table></figure><p>如果你已经创建了一些用户了，你可以为已存在的所有用户创建tokens。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> rest_framework.authtoken.models <span class="keyword">import</span> Token</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> User.objects.all():</span><br><span class="line">    Token.objects.get_or_create(user=user)</span><br></pre></td></tr></table></figure><h5 id="通过爆露的API接口来获得-（By-exposing-an-api-endpoint）"><a href="#通过爆露的API接口来获得-（By-exposing-an-api-endpoint）" class="headerlink" title="通过爆露的API接口来获得 （By exposing an api endpoint）"></a>通过爆露的API接口来获得 （By exposing an api endpoint）</h5><p>当使用<code>TokenAuthentication</code>，你希望提供一种客户端通过用户名和密码获得（obtain）token的机制（mechanism）。<code>REST framework</code> 使用内建（built-in）视图来提供这种行为（behavior）。要使用它，需要添加<code>obtain_auth_token</code> view到你的路由配置里（URLconf）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authtoken <span class="keyword">import</span> views</span><br><span class="line">urlpatterns += [</span><br><span class="line">    url(<span class="string">r'^api-token-auth/'</span>, views.obtain_auth_token)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>注：能匹配以上的地址部分的所有任何请求都是可以访问的。</p></blockquote><p>当使用表单数据或JSON将有效（valid）的用户名和密码字段发布到视图时，<code>obtain_auth_token</code>视图将返回JSON响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &apos;token&apos; : &apos;9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b&apos; &#125;</span><br></pre></td></tr></table></figure><p>注意：请注意，缺省的<code>obtain_auth_token</code>视图显式使用JSON请求和响应，而不是在设置中使用默认的渲染器和分析器类</p><p>默认情况下，不存在对obtain_auth_token视图的权限或限制（throttling）。如果您希望对它限制（throttling），则需要重写视图类，并使用<code>throttle_classes</code>属性（attribute）包含它们。</p><p>如果你需要<code>obtain_auth_token</code>视图的自定义版本，你可以通过继承（subclassing） <code>ObtainAuthToken</code>视图类，然后在你的url conf中使用它。</p><p>示例：您可能需要返回token以外（additional）的其他用户信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authtoken.views <span class="keyword">import</span> ObtainAuthToken</span><br><span class="line"><span class="keyword">from</span> rest_framework.authtoken.models <span class="keyword">import</span> Token</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomAuthToken</span><span class="params">(ObtainAuthToken)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        serializer = self.serializer_class(data=request.data,</span><br><span class="line">                                           context=&#123;<span class="string">'request'</span>: request&#125;)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="keyword">True</span>)</span><br><span class="line">        user = serializer.validated_data[<span class="string">'user'</span>]</span><br><span class="line">        token, created = Token.objects.get_or_create(user=user)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">'token'</span>: token.key,</span><br><span class="line">            <span class="string">'user_id'</span>: user.pk,</span><br><span class="line">            <span class="string">'email'</span>: user.email</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>And in your urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns += [</span><br><span class="line">    url(<span class="string">r'^api-token-auth/'</span>, CustomAuthToken.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="使用Django的管理系统创建token-With-Django-admin"><a href="#使用Django的管理系统创建token-With-Django-admin" class="headerlink" title="使用Django的管理系统创建token (With Django admin)"></a>使用Django的管理系统创建token (With Django admin)</h4><p>也可以通过管理界面手动创建令牌。如果您使用的是大型用户群，我们建议您对TokenAdmin类进行修补以根据需要对其进行定制，更具体地说，将用户字段声明为raw_field</p><p><code>your_app/admin.py:</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authtoken.admin <span class="keyword">import</span> TokenAdmin</span><br><span class="line"></span><br><span class="line">TokenAdmin.raw_id_fields = (<span class="string">'user'</span>,)</span><br></pre></td></tr></table></figure><h4 id="使用Django的manage-py的命令创建（Using-Django-manage-py-command）"><a href="#使用Django的manage-py的命令创建（Using-Django-manage-py-command）" class="headerlink" title="使用Django的manage.py的命令创建（Using Django manage.py command）"></a>使用Django的manage.py的命令创建（Using Django manage.py command）</h4><p>从版本3.6.4开始，可以使用以下命令生成用户令牌：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./manage.py drf_create_token &lt;username&gt;</span><br></pre></td></tr></table></figure><p>此命令将返回给定用户的API令牌，如果不存在则创建它。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Generated token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b <span class="keyword">for</span> user user1</span><br></pre></td></tr></table></figure><p>如果您想重新生成令牌（例如，如果它已被泄露或泄露），您可以通过一个额外的参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./manage.py drf_create_token -r &lt;username&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.django-rest-framework.org/api-guide/authentication/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档原文&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Authentica
      
    
    </summary>
    
      <category term="python" scheme="http://blog.ku-cat.com/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.ku-cat.com/tags/python/"/>
    
      <category term="django" scheme="http://blog.ku-cat.com/tags/django/"/>
    
      <category term="rest-framework" scheme="http://blog.ku-cat.com/tags/rest-framework/"/>
    
  </entry>
  
  <entry>
    <title>nodejs pm2的简单应用</title>
    <link href="http://blog.ku-cat.com/2018/05/02/nodejs-pm2/"/>
    <id>http://blog.ku-cat.com/2018/05/02/nodejs-pm2/</id>
    <published>2018-05-02T09:01:41.000Z</published>
    <updated>2018-05-03T05:14:34.566Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.linuxprobe.com/nodejs-pm2-sample.html" target="_blank" rel="noopener">nodejs pm2的简单应用</a></p><p>待完善</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.linuxprobe.com/nodejs-pm2-sample.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nodejs pm2的简单应用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;待完善&lt;/p&gt;

      
    
    </summary>
    
      <category term="nodejs" scheme="http://blog.ku-cat.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://blog.ku-cat.com/tags/nodejs/"/>
    
      <category term="pm2" scheme="http://blog.ku-cat.com/tags/pm2/"/>
    
  </entry>
  
  <entry>
    <title>code-x</title>
    <link href="http://blog.ku-cat.com/2018/04/30/code-x/"/>
    <id>http://blog.ku-cat.com/2018/04/30/code-x/</id>
    <published>2018-04-29T16:21:32.000Z</published>
    <updated>2018-04-29T16:23:05.319Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.0.0.0 account.jetbrains.com # add host</span><br></pre></td></tr></table></figure><p>激活码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EB101IWSWD-eyJsaWNlbnNlSWQiOiJFQjEwMUlXU1dEIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In1dLCJoYXNoIjoiNjk0NDAzMi8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-Gbb7jeR8JWOVxdUFaXfJzVU/O7c7xHQyaidCnhYLp7v32zdeXiHUU7vlrrm5y9ZX0lmQk3plCCsW+phrC9gGAPd6WDKhkal10qVNg0larCR2tQ3u8jfv1t2JAvWrMOJfFG9kKsJuw1P4TozZ/E7Qvj1cupf/rldhoOmaXMyABxNN1af1RV3bVhe4FFZe0p7xlIJF/ctZkFK62HYmh8V3AyhUNTzrvK2k+t/tlDJz2LnW7nYttBLHld8LabPlEEjpTHswhzlthzhVqALIgvF0uNbIJ5Uwpb7NqR4U/2ob0Z+FIcRpFUIAHEAw+RLGwkCge5DyZKfx+RoRJ/In4q/UpA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="python" scheme="http://blog.ku-cat.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>swoole 创建数据库连接的问题以及如何配置 task_worker_num</title>
    <link href="http://blog.ku-cat.com/2018/04/29/swoole-mysql-redis-connection/"/>
    <id>http://blog.ku-cat.com/2018/04/29/swoole-mysql-redis-connection/</id>
    <published>2018-04-29T15:30:26.000Z</published>
    <updated>2018-04-29T15:52:41.259Z</updated>
    
    <content type="html"><![CDATA[<p>swoole是多进程的运行的，共用1个redis或mysql连接，那么返回的结果无法保证被哪个进程处理。持有连接的进程理论上都可以对这个连接进行读写，这样数据就发生错乱了。所以是不能共用1个连接的。</p><h6 id="所以在多个进程之间，一定不能共用连接"><a href="#所以在多个进程之间，一定不能共用连接" class="headerlink" title="所以在多个进程之间，一定不能共用连接"></a>所以在多个进程之间，一定不能共用连接</h6><ul><li>在swoole_server中，应当在 <code>onWorkerStart</code> 中创建连接对象</li><li>在swoole_process中，应当在 <code>swoole_process-&gt;start</code> 后，子进程的回调函数中创建连接对象</li><li>对使用<code>pcntl_fork</code>的程序同样有效</li></ul><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$serv = <span class="keyword">new</span> swoole_server(<span class="string">"0.0.0.0"</span>, <span class="number">9502</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须在onWorkerStart回调中创建redis/mysql连接</span></span><br><span class="line">$serv-&gt;on(<span class="string">'workerstart'</span>, <span class="function"><span class="keyword">function</span><span class="params">($serv, $id)</span> </span>&#123;</span><br><span class="line">    $redis = <span class="keyword">new</span> redis;</span><br><span class="line">    $redis-&gt;connect(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>);</span><br><span class="line">    $serv-&gt;redis = $redis;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$serv-&gt;on(<span class="string">'receive'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(swoole_server $serv, $fd, $from_id, $data)</span> </span>&#123; </span><br><span class="line">    $value = $serv-&gt;redis-&gt;get(<span class="string">"key"</span>);</span><br><span class="line">    $serv-&gt;send($fd, <span class="string">"Swoole: "</span>.$value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$serv-&gt;start();</span><br></pre></td></tr></table></figure><p>task进程也是worker进程的一种,上面的案例中给每个worker进程分配一个redis链接并保存到了serv对象中,你在ontask回调函数中,参数第一个就是serv,和worker一样,直接在函数体内进行调用就可以了。</p><p>不管是<code>event worker</code> 还是 <code>task workder</code> 启动的时候都会触发 <code>onWorkStart</code> 事件。</p><h2 id="如何配置-task-worker-num-参数"><a href="#如何配置-task-worker-num-参数" class="headerlink" title="如何配置 task_worker_num 参数"></a>如何配置 <code>task_worker_num</code> 参数</h2><p>配置Task进程的数量，配置此参数后将会启用task功能。所以Server务必要注册onTask、onFinish2个事件回调函数。如果没有注册，服务器程序将无法启动。</p><p>Task进程是同步阻塞的，配置方式与Worker同步模式一致。</p><h4 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h4><ul><li>单个task的处理耗时，如100ms，那一个进程1秒就可以处理1/0.1=10个task</li><li>task投递的速度，如每秒产生2000个task</li><li>2000/10=200，需要设置task_worker_num =&gt; 200，启用200个task进程</li></ul><blockquote><p>Task进程内不能使用swoole_server-&gt;task<br>Task进程内不能使用swoole_mysql、swoole_redis、swoole_event等异步IO函数</p></blockquote><hr><h2 id="优化连接数，提高swoole对mysql或redis连接资源的性能优化"><a href="#优化连接数，提高swoole对mysql或redis连接资源的性能优化" class="headerlink" title="优化连接数，提高swoole对mysql或redis连接资源的性能优化"></a>优化连接数，提高swoole对mysql或redis连接资源的性能优化</h2><p>优化连接数的性能方面的操作有以下几个步骤</p><ol><li>mysql需要有断线重连的功能设计</li><li>创建连接必须在onWorkStart方法中创建连接，确保一个进程只使用一个连接</li><li>根据项目计算并设置合理的<code>task_worker_num</code>参数值</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;swoole是多进程的运行的，共用1个redis或mysql连接，那么返回的结果无法保证被哪个进程处理。持有连接的进程理论上都可以对这个连接进行读写，这样数据就发生错乱了。所以是不能共用1个连接的。&lt;/p&gt;
&lt;h6 id=&quot;所以在多个进程之间，一定不能共用连接&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="swoole" scheme="http://blog.ku-cat.com/categories/swoole/"/>
    
    
      <category term="php" scheme="http://blog.ku-cat.com/tags/php/"/>
    
      <category term="swoole" scheme="http://blog.ku-cat.com/tags/swoole/"/>
    
  </entry>
  
  <entry>
    <title>如何识别swoole的worker进程和task进程</title>
    <link href="http://blog.ku-cat.com/2018/04/29/swoole-worker-task/"/>
    <id>http://blog.ku-cat.com/2018/04/29/swoole-worker-task/</id>
    <published>2018-04-29T15:18:58.000Z</published>
    <updated>2018-04-29T15:29:53.922Z</updated>
    
    <content type="html"><![CDATA[<p>本质上workder和task进程是没有什么区别的，只是在设计上各自分工不同，在使用的过程中，我们可以通过<code>worker_id</code>来区分当前的进程是worker进程还是task进程。分析源码可以知道<code>$worker_id</code> <code>&gt;=</code> <code>$serv-&gt;setting[&#39;worker_num&#39;]</code>都是<strong>task workder</strong>进程，否则都 <strong>event worker</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_onWorkerStart</span><span class="params">($serv, $worker_id)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">global</span> $argv;  </span><br><span class="line">    <span class="keyword">if</span> ($worker_id &gt;= $serv-&gt;setting[<span class="string">'worker_num'</span>]) &#123;  </span><br><span class="line">        swoole_set_process_name(<span class="string">"php &#123;$argv[0]&#125; task worker"</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        swoole_set_process_name(<span class="string">"php &#123;$argv[0]&#125; event worker"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//echo "WorkerStart|MasterPid=&#123;$serv-&gt;master_pid&#125;|Manager_pid=&#123;$serv-&gt;manager_pid&#125;|WorkerId=$worker_id\n";  </span></span><br><span class="line">    <span class="comment">//$serv-&gt;addtimer(500); //500ms  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不管是event-worker-还是-task-workder-启动的时候都会触发-onWorkStart-事件。"><a href="#不管是event-worker-还是-task-workder-启动的时候都会触发-onWorkStart-事件。" class="headerlink" title="不管是event worker 还是 task workder 启动的时候都会触发 onWorkStart 事件。"></a>不管是event worker 还是 task workder 启动的时候都会触发 <code>onWorkStart</code> 事件。</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本质上workder和task进程是没有什么区别的，只是在设计上各自分工不同，在使用的过程中，我们可以通过&lt;code&gt;worker_id&lt;/code&gt;来区分当前的进程是worker进程还是task进程。分析源码可以知道&lt;code&gt;$worker_id&lt;/code&gt; &lt;cod
      
    
    </summary>
    
      <category term="swoole" scheme="http://blog.ku-cat.com/categories/swoole/"/>
    
    
      <category term="php" scheme="http://blog.ku-cat.com/tags/php/"/>
    
      <category term="swoole" scheme="http://blog.ku-cat.com/tags/swoole/"/>
    
  </entry>
  
  <entry>
    <title>pomelo 组件概述</title>
    <link href="http://blog.ku-cat.com/2018/04/26/nodejs-pomelo-monitor/"/>
    <id>http://blog.ku-cat.com/2018/04/26/nodejs-pomelo-monitor/</id>
    <published>2018-04-26T11:41:06.000Z</published>
    <updated>2018-04-29T15:19:23.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件概述"><a href="#组件概述" class="headerlink" title="组件概述"></a>组件概述</h1><p>我们知道，pomelo的应用程序执行的全部过程，就是对其相应组件的生命周期的管理，实际的所有逻辑功能均由pomelo组件提供。pomelo内建提供了十多个组件，这些组件适用于不同的服务器，提供不同的功能。有些组件提供的功能比较复杂，有些则比较简单。下面我们将以提供的功能为主线来阐述pomelo提供的内建组件。</p><h2 id="master组件"><a href="#master组件" class="headerlink" title="master组件"></a>master组件</h2><p>它主要的功能包括启动所有的应用服务器、管理和监控所有的应用服务器和接受管理客户端的请求与响应。</p><h2 id="monitor监控组件"><a href="#monitor监控组件" class="headerlink" title="monitor监控组件"></a>monitor监控组件</h2><p>monitor组件由所有的包括master服务器在内的服务器都会加载，它的主要功能就是与master建立连接进行通信，从而对整个应用服务器群进行管理和监控。master服务器本身也会加载monitor服务器，因为master服务器也会收集其本身自己的监控信息。</p><h2 id="connector组件"><a href="#connector组件" class="headerlink" title="connector组件"></a>connector组件</h2><p>connector组件是一个重量级的组件，它会依赖于session组件，server组件，pushScheduler组件和connection组件。</p><p>connector组件仅仅被前端服务器加载，它主要用来管理客户端的连接。<br>connector组件会加载底层的connector，创建端口监听，绑定事件响应。</p><p>当有客户端连接请求时，connector组件会请求session组件，获得当前连接的session，如果session组件中没有相应的session的话，session组件会为这个新连接创建新的session，并维护相应的连接；</p><p>然后connector组件还会向connection组件上报连接信息，供统计使用；</p><p>最后，将拿到的session以及客户端的请求，一起抛给server组件，由server组件进行请求处理。</p><p>当server组件处理完请求后，又会通过connector组件将响应返回给客户端。</p><p>在返回响应给客户端的时候，connector组件做了一个缓存选择，这个缓存实现依赖于pushScheduler组件，也就是说connector组件并不是直接将响应发给客户端，而是将响应给pushScheduler组件。</p><p>pushScheduler组件根据相应调度策略，可能不缓存直接通过session组件维护的连接，将响应发出去，也可能进行缓存，并按时flush。这是可以配置的。</p><h2 id="session组件"><a href="#session组件" class="headerlink" title="session组件"></a>session组件</h2><p>session组件跟connector相关，也是仅仅被前端服务器加载，为sessionService提供一个组件包装, 加载session组件后，会在app的上下文中增加sessionService，可以通过app.get(‘sessionService’)获取。它主要用来维护客户端的连接信息，以及生成session并维护session。</p><p>session组件支持如下配置项:</p><p><strong>singleSession： 如果这个配置项配置为true的话，那么将将不允许一个用户同时绑定到多个session，在绑定用户一次后，后面的绑定将会失败</strong></p><h2 id="connection组件"><a href="#connection组件" class="headerlink" title="connection组件"></a>connection组件</h2><p>connection组件是一个功能相对简单的组件，也是仅仅被前端服务器加载,为connectionService提供一个组件包装,他主要进行连接信息的统计,connector组件接收到客户端连接请求以及有客户端离线时，以及用户登录下线等等情况，都会向其汇报。</p><h2 id="server组件"><a href="#server组件" class="headerlink" title="server组件"></a>server组件</h2><p>server组件也是一个功能比较复杂的组件，它被除master外的服务器加载。server组件会加载并维护自身的Filter信息和Handler信息。server组件会从connector组件的回调里获得到相应的客户端请求或者通知，然后会使用自己的before filters对其消息进行过滤，再次调用自己的相应Handler进行请求的逻辑处理，然后将响应通过回调的方式发给connector处理。最后调用after filters进行一些清理处理。</p><ul><li>server组件 由前端服务器发起RPC调用</li><li>有多台相同的server服务，需要用router分派</li><li>server组件无前用户的，只提供相应的服务。比如计算相关的</li></ul><p>有两层路由进行分布式，由gateserver分配前端服务connector连接</p><h2 id="pushScheduler组件"><a href="#pushScheduler组件" class="headerlink" title="pushScheduler组件"></a>pushScheduler组件</h2><p>pushScheduler组件也是一个功能较为简单的组件，它仅仅被前端服务器加载，与connector组件的关系密切。</p><p>当connector组件收到server组件的对客户端请求的响应后，connector并不直接将此响应返回给客户端，而是将这个给客户端发送响应的操作调度给scheduler组件。</p><p>pushScheduler组件完成最后通过session组件拿到具体的客户端连接并将请求的响应发送给客户端的任务。</p><p>因此，通过pushScheduler组件可以对发给用户的响应进行缓冲，从而提高通信效率。</p><p>pomelo实现了两种调度策略，一种是不进行任何缓冲，直接将响应发送给客户端，一种是进行缓冲，并定时地将已缓冲的响应发送给对应的客户端。</p><h2 id="proxy组件"><a href="#proxy组件" class="headerlink" title="proxy组件"></a>proxy组件</h2><p><strong>proxy组件是一个重量级的组件，它被除master外的所有服务器加载。</strong></p><p>proxy组件会扫描具体应用服务器的目录，抽取其中的remote部分，由于javascript语言的动态性，可以很轻易地获得到remote中的关于远程调用的元信息，生成stub，并将这些调用都挂到app.rpc下面，当用户发起rpc调用时，proxy组件会查看其扫描到的stub信息，以此决定此远程调用是否合法。</p><p>同时，proxy又会创建一个RpcClient，当发起远程调用时，负责与远端的remote进行通信，并得到远程调用的结果供调用者使用。</p><p>当进行远程调用时，由于同类型的远程服务器可能有多个，所以这里同样需要配置相应的router。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件概述&quot;&gt;&lt;a href=&quot;#组件概述&quot; class=&quot;headerlink&quot; title=&quot;组件概述&quot;&gt;&lt;/a&gt;组件概述&lt;/h1&gt;&lt;p&gt;我们知道，pomelo的应用程序执行的全部过程，就是对其相应组件的生命周期的管理，实际的所有逻辑功能均由pomelo组件提供
      
    
    </summary>
    
      <category term="pomelo" scheme="http://blog.ku-cat.com/categories/pomelo/"/>
    
    
      <category term="nodejs" scheme="http://blog.ku-cat.com/tags/nodejs/"/>
    
      <category term="pomelo" scheme="http://blog.ku-cat.com/tags/pomelo/"/>
    
  </entry>
  
  <entry>
    <title>python使用captcha模块生成图形验证码</title>
    <link href="http://blog.ku-cat.com/2018/04/23/python-captcha/"/>
    <id>http://blog.ku-cat.com/2018/04/23/python-captcha/</id>
    <published>2018-04-23T08:05:52.000Z</published>
    <updated>2018-04-23T08:12:34.394Z</updated>
    
    <content type="html"><![CDATA[<p>captcha模块是专门用于生成图形验证码和语音验证码的Python三方库。图形验证码支持数字和英文单词。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以直接使用 pip 安装，或者到<a href="https://github.com/lepture/captcha" target="_blank" rel="noopener">项目地址</a>下载安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install captcha</span><br></pre></td></tr></table></figure><h2 id="模块依赖"><a href="#模块依赖" class="headerlink" title="模块依赖"></a>模块依赖</h2><p>由于 captcha 模块内部是采用 PIL 模块生成图片，所以需要安装 PIL 模块才可以正常使用。</p><h2 id="生成验证码"><a href="#生成验证码" class="headerlink" title="生成验证码"></a>生成验证码</h2><h4 id="一般方法"><a href="#一般方法" class="headerlink" title="一般方法"></a>一般方法</h4><p>使用其中 image 模块中的 ImageCaptcha 类生成图形验证码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> captcha.image <span class="keyword">import</span> ImageCaptcha</span><br><span class="line"></span><br><span class="line">img = ImageCaptcha()</span><br><span class="line">image = img.generate_image(<span class="string">'python'</span>)</span><br><span class="line">image.show()</span><br><span class="line">image.save(<span class="string">'python.jpg'</span>)</span><br></pre></td></tr></table></figure><p>generate_image（） 方法接收一个字符串参数，将生成次字符串内容的验证码，返回的是 PIL 模块中的 Image 对象。可以使用 PIL 模块中 Image 对象的任何支持方法对其操作。例子中的 image.show() 和 image.save() 均是 PIL 模块的方法。</p><h4 id="具体参数"><a href="#具体参数" class="headerlink" title="具体参数"></a>具体参数</h4><p>ImageCaptcha(width=160, height=60, fonts=None, font_sizes=None) 类实例化时，还可传入四个参数:</p><ul><li>width: 生成验证码图片的宽度，默认为160个像素；</li><li>height： 生成验证码图片的高度，默认为60个像素；</li><li>fonts： 字体文件路径，用于生成验证码时的字体，默认使用模块自带 DroidSansMono.ttf 字体，你可以将字体文件放入list或者tuple传入,生成验证码时将随机使用;</li><li>font_sizes： 控制验证码字体大小，同fonts一样，接收一个list或者tuple,随机使用。</li></ul><h4 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h4><ul><li>generate_image(chars) 生成验证码的核心方法，生成chars内容的验证码图片的Image对象。</li><li>create_captcha_image(chars, color, background) generate_image的实现方法，可以通过重写此方法来实现自定义验证码样式。</li><li>create_noise_dots(image, color, width=3, number=30) 生成验证码干扰点。</li><li>create_noise_curve(image, color) 生成验证码干扰曲线。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;captcha模块是专门用于生成图形验证码和语音验证码的Python三方库。图形验证码支持数字和英文单词。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;可以直接使用 pi
      
    
    </summary>
    
      <category term="python" scheme="http://blog.ku-cat.com/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.ku-cat.com/tags/python/"/>
    
      <category term="captcha" scheme="http://blog.ku-cat.com/tags/captcha/"/>
    
  </entry>
  
  <entry>
    <title>nginx+uWSGI搭建python环境运行REST-Framework</title>
    <link href="http://blog.ku-cat.com/2018/04/21/django-nginx-uWSGI/"/>
    <id>http://blog.ku-cat.com/2018/04/21/django-nginx-uWSGI/</id>
    <published>2018-04-21T10:04:46.000Z</published>
    <updated>2018-04-23T06:19:41.139Z</updated>
    
    <content type="html"><![CDATA[<p>uWSGI是一个Web应用服务器，它具有应用服务器，代理，进程管理及应用监控等功能。它支持WSGI协议，同时它也支持自有的uWSGI协议，该协议据说性能非常高，而且内存占用率低，为mod_wsgi的一半左右，它还支持多应用的管理及应用的性能监控。虽然uWSGI本身就可以直接用来当Web服务器，但一般建议将其作为应用服务器配合Nginx一起使用，这样可以更好的发挥Nginx在Web端的强大功能。</p><h2 id="安装uWSGI"><a href="#安装uWSGI" class="headerlink" title="安装uWSGI"></a>安装uWSGI</h2><p>安装比较简单直接使用pip就可以安装了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><p>安装成功后，你可以查看下当前的uwsgi的版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ uwsgi --version</span><br></pre></td></tr></table></figure><p>如果是python3 ，要查看一下uwsgi使用的python版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --python-version</span><br><span class="line">3.5.0 <span class="comment"># 我这里使用的是django2.0版本，必须是要python3.5以上才支持。</span></span><br></pre></td></tr></table></figure><h2 id="启动uWSGI"><a href="#启动uWSGI" class="headerlink" title="启动uWSGI"></a>启动uWSGI</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :9090 --wsgi-file ngrok/wsgi.py</span><br></pre></td></tr></table></figure><p>也可以使用配置文件启动。这样更方便一些。<a href="https://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/uwsgi/#uwsgi-model" target="_blank" rel="noopener">参考djaong官方文档</a> 配置信息如下</p><p>官方命令行直接启动参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --<span class="built_in">chdir</span>=/path/to/your/project \</span><br><span class="line">    --module=mysite.wsgi:application \</span><br><span class="line">    --env DJANGO_SETTINGS_MODULE=mysite.settings \</span><br><span class="line">    --master --pidfile=/tmp/project-master.pid \</span><br><span class="line">    --socket=127.0.0.1:49152 \      <span class="comment"># can also be a file</span></span><br><span class="line">    --processes=5 \                 <span class="comment"># number of worker processes</span></span><br><span class="line">    --uid=1000 --gid=2000 \         <span class="comment"># if root, uwsgi can drop privileges</span></span><br><span class="line">    --harakiri=20 \                 <span class="comment"># respawn processes taking more than 20 seconds</span></span><br><span class="line">    --max-requests=5000 \           <span class="comment"># respawn processes after serving 5000 requests</span></span><br><span class="line">    --vacuum \                      <span class="comment"># clear environment on exit</span></span><br><span class="line">    --home=/path/to/virtual/env \   <span class="comment"># optional path to a virtualenv</span></span><br><span class="line">    --daemonize=/var/<span class="built_in">log</span>/uwsgi/yourproject.log      <span class="comment"># background the process</span></span><br></pre></td></tr></table></figure><p>配置文件启动参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="built_in">chdir</span>=/path/to/your/project <span class="comment">#项目目录</span></span><br><span class="line">module=mysite.wsgi:application <span class="comment">#模块wsgi.py</span></span><br><span class="line">master=True</span><br><span class="line">pidfile=/tmp/project-master.pid</span><br><span class="line">vacuum=True</span><br><span class="line">max-requests=5000</span><br><span class="line">daemonize=/var/<span class="built_in">log</span>/uwsgi/yourproject.log <span class="comment">#守护进程就加这行，日志输出文件</span></span><br></pre></td></tr></table></figure><p>将uWSGI的HTTP端口监听改为socket端口监听，即将配置文件中的”http”项去掉，改为”socket”项：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket=127.0.0.1:3031 <span class="comment"># 主要用nginx转发到这个端口用的</span></span><br></pre></td></tr></table></figure><p>启动方法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure><h3 id="重启uWSGI服务器"><a href="#重启uWSGI服务器" class="headerlink" title="重启uWSGI服务器"></a>重启uWSGI服务器</h3><p>在服务端修改了pyton代码，需要重启uWSGI</p><h5 id="1-使用kill发送信号"><a href="#1-使用kill发送信号" class="headerlink" title="1.使用kill发送信号"></a>1.使用kill发送信号</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># using kill to send the signal</span><br><span class="line">#使用kill发送信号</span><br><span class="line">kill -HUP `cat /tmp/project-master.pid`    # (好用）</span><br></pre></td></tr></table></figure><h5 id="2-或者使用简单选项-–reload"><a href="#2-或者使用简单选项-–reload" class="headerlink" title="2.或者使用简单选项 –reload"></a>2.或者使用简单选项 –reload</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># or the convenience option --reload</span><br><span class="line">#或者使用简单选项 --reload</span><br><span class="line">uwsgi --reload /tmp/project-master.pid</span><br></pre></td></tr></table></figure><h5 id="3-或者，如果uwsgi是使用touch-reload-tmp-somefile启动"><a href="#3-或者，如果uwsgi是使用touch-reload-tmp-somefile启动" class="headerlink" title="3.或者，如果uwsgi是使用touch-reload=/tmp/somefile启动"></a>3.或者，如果uwsgi是使用touch-reload=/tmp/somefile启动</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># or if uwsgi was started with touch-reload=/tmp/somefile</span><br><span class="line">#或者，如果uwsgi是使用touch-reload=/tmp/somefile启动</span><br><span class="line"></span><br><span class="line">touch /tmp/somefile</span><br></pre></td></tr></table></figure><h5 id="4-或者在Python程序里："><a href="#4-或者在Python程序里：" class="headerlink" title="4.或者在Python程序里："></a>4.或者在Python程序里：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Or from your application, in Python:</span><br><span class="line">或者在Python程序里：</span><br><span class="line">uwsgi.reload()</span><br></pre></td></tr></table></figure><p>注意，如果要使用pid，需要在uwsgi启动参数中指定 –pidfile，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#/etc/rc.local 修改自启动</span><br><span class="line">/usr/local/bin/uwsgi /var/www/html/mz_uwsgi.ini --pidfile /tmp/uwsgi.pid</span><br></pre></td></tr></table></figure><p>比reboot服务器方便。</p><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>Nginx的安装在此省略，nginx的配置如下：这段配置表明Nginx会将收到的所有请求都转发到”127.0.0.1:3031″端口上，即uWSGI服务器上。现在让我们重启Nginx，并启动uWSGI服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    include uwsgi_params;</span><br><span class="line">    uwsgi_pass 127.0.0.1:3031;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br><span class="line">$ uwsgi uwsgi.ini</span><br></pre></td></tr></table></figure><p>详情可以参考 <a href="http://www.bjhee.com/nginx-uwsgi.html" target="_blank" rel="noopener">使用Nginx和uWSGI来运行Python应用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;uWSGI是一个Web应用服务器，它具有应用服务器，代理，进程管理及应用监控等功能。它支持WSGI协议，同时它也支持自有的uWSGI协议，该协议据说性能非常高，而且内存占用率低，为mod_wsgi的一半左右，它还支持多应用的管理及应用的性能监控。虽然uWSGI本身就可以直接
      
    
    </summary>
    
      <category term="python" scheme="http://blog.ku-cat.com/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.ku-cat.com/tags/python/"/>
    
      <category term="nginx" scheme="http://blog.ku-cat.com/tags/nginx/"/>
    
      <category term="uWSGI" scheme="http://blog.ku-cat.com/tags/uWSGI/"/>
    
  </entry>
  
  <entry>
    <title>django on_delete 的报错修复</title>
    <link href="http://blog.ku-cat.com/2018/04/20/django-bug/"/>
    <id>http://blog.ku-cat.com/2018/04/20/django-bug/</id>
    <published>2018-04-20T14:35:59.000Z</published>
    <updated>2018-04-21T03:14:33.514Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/12.jpg" alt=""></p><p>给model增加外键，后报如下的错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userId = models.ForeignKey(User, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><p>报以下的错误：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">  File <span class="string">"/Users/ben/django/ngrokProject/ngrok/ngrokApp/models.py"</span>, line 12, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    class Tunnel(models.Model):</span><br><span class="line">  File <span class="string">"/Users/ben/django/ngrokProject/ngrok/ngrokApp/models.py"</span>, line 14, <span class="keyword">in</span> Tunnel</span><br><span class="line">    userId = models.ForeignKey(User)</span><br><span class="line">TypeError: __init__() missing 1 required positional argument: <span class="string">'on_delete'</span></span><br><span class="line">Performing system checks...</span><br></pre></td></tr></table></figure><p>解决办法：<br>将第十一行的代码改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">herobook=models.ForeignKey(<span class="string">'BookInfo'</span>,on_delete=models.CASCADE,)</span><br></pre></td></tr></table></figure><p>即在外键值的后面加上 on_delete=models.CASCADE</p><p>目前还没有找到为什么。不过这样确实能解决问题，以后找到根本原因后再来补笔记。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/12.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;给model增加外键，后报如下的错误：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="python" scheme="http://blog.ku-cat.com/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.ku-cat.com/tags/python/"/>
    
      <category term="django" scheme="http://blog.ku-cat.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django-rest-framework调试工具 httpie</title>
    <link href="http://blog.ku-cat.com/2018/04/17/django-debug-httpie/"/>
    <id>http://blog.ku-cat.com/2018/04/17/django-debug-httpie/</id>
    <published>2018-04-17T13:35:59.000Z</published>
    <updated>2018-04-21T03:06:07.071Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/city.jpg" alt=""></p><p>使用django-rest-framework可以方便快捷的写出优美的restfull API，同样django也有非常方便的调试工具httpie。</p><h3 id="安装httpie"><a href="#安装httpie" class="headerlink" title="安装httpie"></a>安装httpie</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install httpie</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h2 id="使用GET"><a href="#使用GET" class="headerlink" title="使用GET"></a>使用GET</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http http://127.0.0.1:8000/domain/4/</span><br></pre></td></tr></table></figure><p>返回的结果以非常友好的形式显示，而且还是彩色的！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Content-Length: 200</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Fri, 20 Apr 2018 15:02:48 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.6.4</span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"ICP"</span>: null,</span><br><span class="line">        <span class="string">"ICP_master"</span>: null,</span><br><span class="line">        <span class="string">"ICP_type"</span>: null,</span><br><span class="line">        <span class="string">"addDate"</span>: <span class="string">"2018-04-12T15:31:03.291517+08:00"</span>,</span><br><span class="line">        <span class="string">"domain"</span>: <span class="string">"acc.s1.ilaputa.cn"</span>,</span><br><span class="line">        <span class="string">"expire"</span>: <span class="string">"2018-04-12T15:31:03.291571+08:00"</span>,</span><br><span class="line">        <span class="string">"status"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"type"</span>: 3,</span><br><span class="line">        <span class="string">"userId"</span>: 4</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以指定返回的数据格式。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http http://127.0.0.1:8000/domain/4/ Accept:text/html</span><br><span class="line"><span class="comment"># 返回网页形式，是django-rest-framework的界面代码</span></span><br><span class="line">http http://127.0.0.1:8000/domain/4/ Accept:application/json</span><br><span class="line"><span class="comment"># 返回json格式</span></span><br></pre></td></tr></table></figure><h2 id="使用POST方法"><a href="#使用POST方法" class="headerlink" title="使用POST方法"></a>使用POST方法</h2><p>调试post接口如下使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http --form POST http://127.0.0.1:8000/user/ username=18657986877 password=123456 verify=abc</span><br></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HTTP/1.1 400 Bad Request</span><br><span class="line">Allow: POST, OPTIONS</span><br><span class="line">Content-Length: 59</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Fri, 20 Apr 2018 15:08:38 GMT</span><br><span class="line">Server: WSGIServer/0.2 CPython/3.6.4</span><br><span class="line">Vary: Accept, Cookie</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"username"</span>: [</span><br><span class="line">        <span class="string">"已存在一位使用该名字的用户。"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用登录信息的使用方法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http -a admin:admin123 POST http://127.0.0.1:8000/user/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/city.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用django-rest-framework可以方便快捷的写出优美的restfull API，同样django也有非常方便的调试工具httpie。&lt;/p&gt;
&lt;h3 id=&quot;安装httpie&quot;&gt;
      
    
    </summary>
    
      <category term="python" scheme="http://blog.ku-cat.com/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.ku-cat.com/tags/python/"/>
    
      <category term="django" scheme="http://blog.ku-cat.com/tags/django/"/>
    
      <category term="httpie" scheme="http://blog.ku-cat.com/tags/httpie/"/>
    
  </entry>
  
  <entry>
    <title>django-rest-framework</title>
    <link href="http://blog.ku-cat.com/2018/04/13/python-django-rest/"/>
    <id>http://blog.ku-cat.com/2018/04/13/python-django-rest/</id>
    <published>2018-04-13T07:50:59.000Z</published>
    <updated>2018-04-20T14:57:06.377Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/logo2.png" alt=""></p><p>Django REST framework is a powerful and flexible toolkit for building Web APIs.</p><p>Some reasons you might want to use REST framework:</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br><span class="line">pip install markdown       <span class="comment"># Markdown support for the browsable API.</span></span><br><span class="line">pip install django-filter  <span class="comment"># Filtering support</span></span><br></pre></td></tr></table></figure><p>我使用的是python3.6, 所以使用pip3安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  ngrok git:(master) pip3 install djangorestframework</span><br><span class="line">Collecting djangorestframework</span><br><span class="line">  Downloading djangorestframework-3.8.2-py2.py3-none-any.whl (923kB)</span><br><span class="line">    100% |████████████████████████████████| 931kB 1.1MB/s</span><br><span class="line">Installing collected packages: djangorestframework</span><br><span class="line">Successfully installed djangorestframework-3.8.2</span><br><span class="line">You are using pip version 9.0.1, however version 9.0.3 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># ... 安装完成</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/logo2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Django REST framework is a powerful and flexible toolkit for building Web APIs.&lt;/p&gt;
&lt;p&gt;Some reas
      
    
    </summary>
    
      <category term="python" scheme="http://blog.ku-cat.com/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.ku-cat.com/tags/python/"/>
    
      <category term="django" scheme="http://blog.ku-cat.com/tags/django/"/>
    
      <category term="REST" scheme="http://blog.ku-cat.com/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>php调试技巧,使用debug_print_backtrace调用堆栈信息</title>
    <link href="http://blog.ku-cat.com/2018/04/13/php-debug-print-backtrace/"/>
    <id>http://blog.ku-cat.com/2018/04/13/php-debug-print-backtrace/</id>
    <published>2018-04-13T03:41:58.000Z</published>
    <updated>2018-04-13T04:07:44.964Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/v2-02ee40eb71cae2a6b06657fea246f70f_1200x500.jpg" alt=""></p><p>很语言在调试的时候都有堆栈信息显示，调试起来很方便，php使用断点调试也可以显示堆栈信息，但是环境配置有点麻烦。最简单的办法就是使用debug_print_backtrace()函数，直接打印出堆栈，方便快捷，最重要的是比较符合广大php开发人员的习惯（用输出进行调试）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在需要调试的地方使用该函数</span></span><br><span class="line">debug_print_backtrace();</span><br></pre></td></tr></table></figure><p>我这里是swoole控制台的程序，所以在控制台打印结果信息。这里要查的问题是operateLock()方法被连接调用了两次的bug。调用堆栈信息，一切都很清楚了。</p><p>打印显示Command类的方法被调用两次。第一次是QuickStartCommand.php对象里面调用了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0  lib\core\Command-&gt;operateLock(197) called at [/home/niuniu/crazyService/src/command/QuickStartCommand.php:27]</span></span><br><span class="line"><span class="comment">#1  src\command\QuickStartCommand-&gt;logicalProcessing() called at [/home/niuniu/crazyService/lib/core/Command.php:74]</span></span><br><span class="line"><span class="comment">#2  lib\core\Command-&gt;receiveCommand() called at [/home/niuniu/crazyService/src/GameMain.php:167]</span></span><br></pre></td></tr></table></figure><p>第二次是JoinCommand.php调用了该方法，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0  lib\core\Command-&gt;operateLock(197) called at [/home/niuniu/crazyService/src/command/JoinCommand.php:27]</span></span><br><span class="line"><span class="comment">#1  src\command\JoinCommand-&gt;logicalProcessing() called at [/home/niuniu/crazyService/lib/core/Command.php:74]</span></span><br><span class="line"><span class="comment">#2  lib\core\Command-&gt;receiveCommand() called at [/home/niuniu/crazyService/src/command/QuickStartCommand.php:110]</span></span><br><span class="line"><span class="comment">#3  src\command\QuickStartCommand-&gt;joinRoom(880460) called at [/home/niuniu/crazyService/src/command/QuickStartCommand.php:47]</span></span><br><span class="line"><span class="comment">#4  src\command\QuickStartCommand-&gt;logicalProcessing() called at [/home/niuniu/crazyService/lib/core/Command.php:74]</span></span><br><span class="line"><span class="comment">#5  lib\core\Command-&gt;receiveCommand() called at [/home/niuniu/crazyService/src/GameMain.php:167]</span></span><br></pre></td></tr></table></figure><p>问题找到，fix bug就是很easy的事情了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/v2-02ee40eb71cae2a6b06657fea246f70f_1200x500.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;很语言在调试的时候都有堆栈信息显示，调试起来很方便，php使用断点调试也可以显示堆栈信息，但是环境配置有点麻烦。最
      
    
    </summary>
    
      <category term="php" scheme="http://blog.ku-cat.com/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.ku-cat.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>django 数据库操作</title>
    <link href="http://blog.ku-cat.com/2018/04/09/django-db/"/>
    <id>http://blog.ku-cat.com/2018/04/09/django-db/</id>
    <published>2018-04-09T01:08:05.000Z</published>
    <updated>2018-04-12T01:59:59.412Z</updated>
    
    <content type="html"><![CDATA[<p>django1.7以后的版本，数据库迁移只有三个命令</p><ul><li>migrate：用来迁移数据库</li><li>makemigrations：用来检测数据库变更和生成数据库迁移文件。</li><li>sqlmigrate：用来把数据库迁移文件转换成数据库语言(displays the SQL statements for a migratioin.）</li></ul><h3 id="1-makemigrations检查models更新创建initial-py文件的操作"><a href="#1-makemigrations检查models更新创建initial-py文件的操作" class="headerlink" title="1. makemigrations检查models更新创建initial.py文件的操作"></a>1. makemigrations检查models更新创建initial.py文件的操作</h3><p>django2.0和1.0对于数据库的操作有些区别了。比如我们对model进行修改，需要执行以下命令进行操作。相当于在bookApp目录下建立migrations目录，并记录下你所有关于modes.py的改动。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations bookApp <span class="comment"># bookApp为应用名称</span></span><br><span class="line"><span class="comment"># 运行显示如下内容：</span></span><br><span class="line">Migrations <span class="keyword">for</span> <span class="string">'bookApp'</span>:</span><br><span class="line">  bookApp/migrations/0003_auto_20180412_0846.py </span><br><span class="line">  <span class="comment"># 我这里已经是第3次修改了，所以是0003_auto_20180412_0846.py</span></span><br><span class="line">    - Alter field fontDomain on tunnel</span><br></pre></td></tr></table></figure><p>执行以上的命令会在bookApp下创建migrations目录，并生成类似0001_initial.py的文件，但是这个改动还没有作用到数据。</p><p>打开0001_initial.py文件显示如下内容。但并没有更新数据库。记录的是每次对数据库的修改，更像是<font color="red">数据库的版本控制</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generated by Django 2.0.1 on 2018-04-11 06:45</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations, models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Migration</span><span class="params">(migrations.Migration)</span>:</span></span><br><span class="line"></span><br><span class="line">    initial = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    operations = [</span><br><span class="line">        migrations.CreateModel(</span><br><span class="line">            name=<span class="string">'PhoneVerify'</span>,</span><br><span class="line">            fields=[</span><br><span class="line">                (<span class="string">'id'</span>, models.AutoField(auto_created=<span class="keyword">True</span>, primary_key=<span class="keyword">True</span>, serialize=<span class="keyword">False</span>, verbose_name=<span class="string">'ID'</span>)),</span><br><span class="line">                (<span class="string">'phone'</span>, models.CharField(default=<span class="number">0</span>, max_length=<span class="number">11</span>)),</span><br><span class="line">                (<span class="string">'sendDate'</span>, models.DateField(auto_now=<span class="keyword">True</span>)),</span><br><span class="line">            ],</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>生成这个文件后下面我们可以执行migrate命令把变更更新到数据库。</p><h3 id="2-migrate用来迁移数据库"><a href="#2-migrate用来迁移数据库" class="headerlink" title="2. migrate用来迁移数据库"></a>2. migrate用来迁移数据库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate     <span class="comment">#用来迁移数据库</span></span><br></pre></td></tr></table></figure><p>数据操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations ngrokApp</span><br><span class="line"></span><br><span class="line">Migrations <span class="keyword">for</span> <span class="string">'ngrokApp'</span>:</span><br><span class="line">  ngrokApp/migrations/0002_domain_fans_flowpackage_message_recharge_score_tunnel.py</span><br><span class="line">    - Create model Domain</span><br><span class="line">    - Create model Fans</span><br><span class="line">    - Create model FlowPackage</span><br><span class="line">    - Create model Message</span><br><span class="line">    - Create model Recharge</span><br><span class="line">    - Create model Score</span><br><span class="line">    - Create model Tunnel</span><br><span class="line"></span><br><span class="line">python3 manage.py migrate</span><br><span class="line"></span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, ngrokApp, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying ngrokApp.0002_domain_fans_flowpackage_message_recharge_score_tunnel... OK</span><br><span class="line">  </span><br><span class="line">python3 manage.py sqlmigrate ngrokApp 0002</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;django1.7以后的版本，数据库迁移只有三个命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;migrate：用来迁移数据库&lt;/li&gt;
&lt;li&gt;makemigrations：用来检测数据库变更和生成数据库迁移文件。&lt;/li&gt;
&lt;li&gt;sqlmigrate：用来把数据库迁移文件转换成数据库
      
    
    </summary>
    
      <category term="python" scheme="http://blog.ku-cat.com/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.ku-cat.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python多线程并发数的控制</title>
    <link href="http://blog.ku-cat.com/2018/04/08/python-Thread/"/>
    <id>http://blog.ku-cat.com/2018/04/08/python-Thread/</id>
    <published>2018-04-08T01:08:05.000Z</published>
    <updated>2018-04-13T04:01:53.673Z</updated>
    
    <content type="html"><![CDATA[<p>多线程能够有效的提升执行效率，但是在我们压扎机器资源的时候也要适当进行，否则可能导致资源消耗过大，得不偿失，因此对并发的控制就变得很重要了。python正好有比较好的控制方法。使用semaphore进行控制。</p><h3 id="信号量：class-threading-Semaphore-value"><a href="#信号量：class-threading-Semaphore-value" class="headerlink" title="信号量：class threading.Semaphore([value])"></a>信号量：class threading.Semaphore([value])</h3><blockquote><p>values是一个内部计数，values默认是1，如果小于0，则会抛出 ValueError 异常，可以用于控制线程数并发数<br>1.acquire([blocking])<br>2.release()</p></blockquote><p>例：数据库的连接数控制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">maxconnections = <span class="number">5</span> <span class="comment"># 最多5个线程同时运行</span></span><br><span class="line">...</span><br><span class="line">pool_sema = BoundedSemaphore(value=maxconnections)</span><br><span class="line"></span><br><span class="line">pool_sema.acquire() <span class="comment"># 开始时候计数</span></span><br><span class="line">conn = connectdb()</span><br><span class="line"><span class="meta">... </span>use connection ...</span><br><span class="line">conn.close()</span><br><span class="line">pool_sema.release() <span class="comment"># 完成释放，新的线程可以继续运行</span></span><br></pre></td></tr></table></figure><p>SpiderRobot类的pageAnalysis函数创建队列中数量的线程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pageAnalysis</span><span class="params">(self)</span>:</span></span><br><span class="line">    semlock = threading.BoundedSemaphore(self.maxconnections)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(self.queue.qsize()):</span><br><span class="line">        semlock.acquire() <span class="comment"># 开始时候计数</span></span><br><span class="line">        details = DetailsAnalysis() <span class="comment"># 该对象继承threading</span></span><br><span class="line">        details.initData(self.queue.get(), semlock)</span><br><span class="line">        details.start() <span class="comment">#线程开始</span></span><br></pre></td></tr></table></figure><p>数据保存线程结束，调用self.semlock.release() 释放线程，进程继续进行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveData</span><span class="params">(self)</span>:</span></span><br><span class="line">    cursor = self.db.cursor()</span><br><span class="line">    sql = <span class="string">"insert into company (company_name,name,mobile,phone,address) value ('"</span> + self.companyName + <span class="string">"','"</span> + self.name + <span class="string">"','"</span> + self.mobile + <span class="string">"','"</span> + self.telephone + <span class="string">"','"</span> + self.address + <span class="string">"')"</span></span><br><span class="line">    print(<span class="string">"sql:"</span>,sql)</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    self.db.commit()</span><br><span class="line">    self.semlock.release() <span class="comment"># 当前任务完成，线程释放</span></span><br></pre></td></tr></table></figure><p>以上的代码我们有self.queue.qsize()数量的任务需要去做，我们希望使用多线程并发的形式去处理这些任务，以达到高效的处理，但是由于资源是有限的，所以我们不能够有多少任务就创建多少线程，每个线程是需要占用内存和系统资源的，数量过大可能会消耗掉机器所有资源最终可能导致系统启机，我们肯定希望在同一时间有多少线程在运行是可控的。</p><p>以上的方法可以有效的控制同一时间运行的线程数量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多线程能够有效的提升执行效率，但是在我们压扎机器资源的时候也要适当进行，否则可能导致资源消耗过大，得不偿失，因此对并发的控制就变得很重要了。python正好有比较好的控制方法。使用semaphore进行控制。&lt;/p&gt;
&lt;h3 id=&quot;信号量：class-threading-
      
    
    </summary>
    
      <category term="python" scheme="http://blog.ku-cat.com/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.ku-cat.com/tags/python/"/>
    
      <category term="thread" scheme="http://blog.ku-cat.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>nodejs的process.nextTick()的原理及应用场景</title>
    <link href="http://blog.ku-cat.com/2018/04/04/nodejs-process/"/>
    <id>http://blog.ku-cat.com/2018/04/04/nodejs-process/</id>
    <published>2018-04-04T08:17:42.000Z</published>
    <updated>2018-04-13T04:00:11.222Z</updated>
    
    <content type="html"><![CDATA[<p>nodejs的API原型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick(callback[, ...args])</span><br></pre></td></tr></table></figure><ul><li>callback  \&lt;Function> </li><li>…args <any> 调用 callback时传递给它的额外参数</any></li></ul><p>说明：process.nextTick()方法将 callback 添加到”next tick 队列”。 一旦当前事件轮询队列的任务全部完成，在next tick队列中的所有callbacks会被依次调用。</p><p>这种方式不是setTimeout(fn, 0)的别名。它更加有效率。事件轮询随后的ticks 调用，会在任何I/O事件（包括定时器）之前运行。</p><p>以上的是API的原文说明，说得比较明白了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'nextTick callback'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'scheduled'</span>);</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// start </span></span><br><span class="line"><span class="comment">// scheduled</span></span><br><span class="line"><span class="comment">// nextTick callback 最后执行，nextTick的callback被放到任务队列的最后面。要到下一次tick时被执行。</span></span><br></pre></td></tr></table></figure><p>Node.js是单线程的，除了系统IO之外，在它的事件轮询过程中，同一时间只会处理一个事件。你可以把事件轮询想象成一个大的队列，在每个时间点上，系统只会处理一个事件。即使你的电脑有多个CPU核心，你也无法同时并行的处理多个事件。但也就是这种特性使得node.js适合处理I／O型的应用，不适合那种CPU运算型的应用。在每个I／O型的应用中，你只需要给每一个输入输出定义一个回调函数即可，他们会自动加入到事件轮询的处理队列里。当I／O操作完成后，这个回调函数会被触发。然后系统会继续处理其他的请求。</p><p>–</p><p>在这种处理模式下，process.nextTick()的意思就是定义出一个动作，并且让这个动作在下一个事件轮询的时间点上执行。我们来看一个例子。例子中有一个foo()，你想在下一个时间点上调用他，可以这么做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process.nextTick(foo);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'bar'</span>);</span><br></pre></td></tr></table></figure><p>运行上面的代码，你从下面终端打印的信息会看到，”bar”的输出在“foo”的前面。这就验证了上面的说法，foo()是在下一个时间点运行的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bar</span><br><span class="line">foo</span><br></pre></td></tr></table></figure><p>你也可以使用setTimeout()函数来达到貌似同样的执行效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(foo, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bar'</span>);</span><br></pre></td></tr></table></figure><p>但在内部的处理机制上，process.nextTick()和setTimeout(fn, 0)是不同的，process.nextTick()不是一个单纯的延时，他有更多的特性。</p><p><strong>更精确的说</strong>：<font color="red">process.nextTick()定义的调用会创建一个新的子堆栈。在当前的栈里，你可以执行任意多的操作。但一旦调用netxTick，函数就必须返回到父堆栈。然后事件轮询机制又重新等待处理新的事件，如果发现nextTick的调用，就会创建一个新的栈。</font></p><h3 id="应用场景：-什么情况下使用process-nextTick-："><a href="#应用场景：-什么情况下使用process-nextTick-：" class="headerlink" title="应用场景： 什么情况下使用process.nextTick()："></a>应用场景： 什么情况下使用process.nextTick()：</h3><h4 id="1-在多个事件里交叉执行CPU运算密集型的任务："><a href="#1-在多个事件里交叉执行CPU运算密集型的任务：" class="headerlink" title="1. 在多个事件里交叉执行CPU运算密集型的任务："></a>1. 在多个事件里交叉执行CPU运算密集型的任务：</h4><p>在下面的例子里有一个compute()，我们希望这个函数尽可能持续的执行，来进行一些运算密集的任务。</p><p>但与此同时，我们还希望系统不要被这个函数堵塞住，还需要能响应处理别的事件。这个应用模式就像一个单线程的web服务server。在这里我们就可以使用process.nextTick()来交叉执行compute()和正常的事件响应。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compute</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// performs complicated calculations continuously</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    process.nextTick(compute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">     res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">     res.end(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;).listen(<span class="number">5000</span>, <span class="string">'127.0.0.1'</span>);</span><br><span class="line"></span><br><span class="line">compute();</span><br></pre></td></tr></table></figure><p>在这种模式下，我们不需要递归的调用compute()，我们只需要在事件循环中使用process.nextTick()定义compute()在下一个时间点执行即可。在这个过程中，如果有新的http请求进来，事件循环机制会先处理新的请求，然后再调用compute()。反之，如果你把compute()放在一个递归调用里，那系统就会一直阻塞在compute()里，无法处理新的http请求了。你可以自己试试。</p><p>当然，我们无法通过process.nextTick()来获得多CPU下并行执行的真正好处，这只是模拟同一个应用在CPU上分段执行而已。</p><h4 id="2-保持回调函数异步执行的原则"><a href="#2-保持回调函数异步执行的原则" class="headerlink" title="2. 保持回调函数异步执行的原则"></a>2. 保持回调函数异步执行的原则</h4><p>当你给一个函数定义一个回调函数时，你要确保这个回调是被异步执行的。下面我们看一个例子，例子中的回调违反了这一原则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFake</span>(<span class="params">data, callback</span>) </span>&#123;        </span><br><span class="line">    <span class="keyword">if</span>(data === <span class="string">'foo'</span>) callback(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">else</span> callback(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFake(<span class="string">'bar'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this callback is actually called synchronously!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为什么这样不好呢？我们来看Node.js 文档里一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = net.connect(<span class="number">8124</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'client connected'</span>);</span><br><span class="line">    client.write(<span class="string">'world!\r\n'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码里，如果因为某种原因，net.connect()变成同步执行的了，回调函数就会被立刻执行，因此回调函数写到客户端的变量就永远不会被初始化了。</p><p>这种情况下我们就可以使用process.nextTick()把上面asyncFake()改成异步执行的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncReal</span>(<span class="params">data, callback</span>) </span>&#123;</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        callback(data === <span class="string">'foo'</span>);       </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-用在事件触发过程中"><a href="#3-用在事件触发过程中" class="headerlink" title="3.用在事件触发过程中"></a>3.用在事件触发过程中</h4><p>来看一个例子，你想写一个库实现这样的功能：从源文件里读取数据，当读取完毕后，触发一个事件同时传递读取的数据。可能你会这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">StreamLibrary</span>(<span class="params">resourceName</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.emit(<span class="string">'start'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read from the file, and for every chunk read, do:        </span></span><br><span class="line">    <span class="keyword">this</span>.emit(<span class="string">'data'</span>, chunkRead);       </span><br><span class="line">&#125;</span><br><span class="line">StreamLibrary.prototype.__proto__ = EventEmitter.prototype;   <span class="comment">// inherit from EventEmitter</span></span><br></pre></td></tr></table></figure><p>下面是一段调用这个库的客户端程序，我们想在程序中监听这些事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = <span class="keyword">new</span> StreamLibrary(<span class="string">'fooResource'</span>);</span><br><span class="line"></span><br><span class="line">stream.on(<span class="string">'start'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Reading has started'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">stream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Received: '</span> + chunk);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是上面的代码中，将永远接收不到“start”事件，因为在这个库实例化的时候，“start”事件会被立刻触发执行，但此时事件的回调函数还没有准备好，所以在客户端根本无法接收到这个事件。同样，我们可以用process.nextTick()来改写事件触发的过程，下面是一个正确的版本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">StreamLibrary</span>(<span class="params">resourceName</span>) </span>&#123;      </span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        self.emit(<span class="string">'start'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read from the file, and for every chunk read, do:        </span></span><br><span class="line">    <span class="keyword">this</span>.emit(<span class="string">'data'</span>, chunkRead);       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是process.nextTick()的基本用法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nodejs的API原型：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;co
      
    
    </summary>
    
      <category term="nodejs" scheme="http://blog.ku-cat.com/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://blog.ku-cat.com/tags/nodejs/"/>
    
      <category term="process" scheme="http://blog.ku-cat.com/tags/process/"/>
    
      <category term="nextTick" scheme="http://blog.ku-cat.com/tags/nextTick/"/>
    
  </entry>
  
  <entry>
    <title>django登录写入session的操作</title>
    <link href="http://blog.ku-cat.com/2018/04/04/python-django-session/"/>
    <id>http://blog.ku-cat.com/2018/04/04/python-django-session/</id>
    <published>2018-04-04T00:25:42.000Z</published>
    <updated>2018-04-13T04:01:15.435Z</updated>
    
    <content type="html"><![CDATA[<p>用户登录是需要把用户的相关数据写入session的，在django中用户登录的操作代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkuser</span><span class="params">(request)</span>:</span>  </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:  </span><br><span class="line">        user = request.POST.get(<span class="string">'username'</span>)  </span><br><span class="line">        passwd = request.POST.get(<span class="string">'password'</span>)  </span><br><span class="line">        <span class="keyword">print</span> user,passwd  </span><br><span class="line">        <span class="keyword">try</span>:  </span><br><span class="line">            passwd_db = User.objects.get(username=user).password  </span><br><span class="line">        <span class="keyword">except</span>:  </span><br><span class="line">            messages.add_message(request,messages.WARNING,<span class="string">'找不到用户'</span>)  </span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'showdb/login.html'</span>,&#123;<span class="string">'login_info_list'</span>:<span class="string">"请使用正确的账号密码登陆"</span>&#125;,)  </span><br><span class="line">        <span class="keyword">if</span> passwd == passwd_db :  </span><br><span class="line">            request.session[<span class="string">'username'</span>] = user  </span><br><span class="line">            request.session.set_expiry(<span class="number">600</span>)  </span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'showdb/index.html'</span>,&#123;  </span><br><span class="line">            <span class="string">'welcome'</span>:<span class="string">"欢迎你"</span>&#125;)  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            messages.add_message(request,messages.WARNING,<span class="string">'密码错误'</span>)  </span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'showdb/login.html'</span>,&#123;<span class="string">'login_info_list'</span>:<span class="string">"请使用正确的账号密码登陆"</span>&#125;,)</span><br></pre></td></tr></table></figure><p>以上是登录部分的代码，写入session的部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.session[<span class="string">'username'</span>] = user  <span class="comment"># 用户名写入session</span></span><br><span class="line">request.session.set_expiry(<span class="number">600</span>) <span class="comment"># 设置session有效时间。</span></span><br></pre></td></tr></table></figure><p>前端代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> request.session.username %&#125;  </span><br><span class="line">    &lt;h4 style='font-family:楷体;'&gt;&#123;&#123; welcome&#125;&#125; &#123;&#123; request.session.username &#125;&#125; &lt;/h4&gt;  </span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;  </span><br><span class="line">    &lt;h3 style='font-family:楷体;'&gt;请重新登陆&lt;/h3&gt;  </span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用户登录是需要把用户的相关数据写入session的，在django中用户登录的操作代码如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="python" scheme="http://blog.ku-cat.com/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.ku-cat.com/tags/python/"/>
    
      <category term="django" scheme="http://blog.ku-cat.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>mac下搭建django2.0的开发环境</title>
    <link href="http://blog.ku-cat.com/2018/04/03/python-django/"/>
    <id>http://blog.ku-cat.com/2018/04/03/python-django/</id>
    <published>2018-04-03T13:32:13.000Z</published>
    <updated>2018-04-13T04:01:39.828Z</updated>
    
    <content type="html"><![CDATA[<p>mac 下搭建django2.0的开发环境，mac上默认的python版本是2.7，django需要的是python3以上的版本。所以我们需要再安装一个python3.5的版本。python2.7和python3.5可以共存的。直接安装就可以了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -V <span class="comment">#查看python版本，默认的mac上的python版本是2.7</span></span><br></pre></td></tr></table></figure><p>我们可以到<a href="https://www.python.org上下载安装python3.0安装文件，是pyton-3.6.5-macos.pkg文件，双击安装即可。" target="_blank" rel="noopener">https://www.python.org上下载安装python3.0安装文件，是pyton-3.6.5-macos.pkg文件，双击安装即可。</a></p><p>安装完成后，查看版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  django python -V</span><br><span class="line">Python 2.7.10</span><br><span class="line">➜  django python -V</span><br><span class="line">Python 2.7.10</span><br><span class="line">➜  django python3 -V</span><br><span class="line">Python 3.6.5</span><br></pre></td></tr></table></figure><p>如果没有安装pip，先安装pip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  django sudo easy_install pip</span><br><span class="line">Password:</span><br><span class="line">Searching for pip</span><br><span class="line">Reading https://pypi.python.org/simple/pip/</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>这里的pip是2.7的pip，只能安装django1.x版本，要安装django2.0的版本需要安装pip3版本。安装pip3的方法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py | python3</span><br></pre></td></tr></table></figure><p>使用上面的命令用python3，安装pip3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  django curl https://bootstrap.pypa.io/get-pip.py | python3</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 1738k  100 1738k    0     0  1610k      0  0:00:01  0:00:01 --:--:-- 1612k</span><br><span class="line">Cache entry deserialization failed, entry ignored</span><br><span class="line">Requirement already up-to-date: pip in /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages</span><br><span class="line">Collecting wheel</span><br><span class="line">  Downloading wheel-0.31.0-py2.py3-none-any.whl (41kB)</span><br><span class="line">    100% |████████████████████████████████| 51kB 533kB/s </span><br><span class="line">Installing collected packages: wheel</span><br><span class="line">Successfully installed wheel-0.31.0</span><br></pre></td></tr></table></figure><p>安装成功后，检查版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  django pip -V</span><br><span class="line">pip 10.0.0b2 from /Library/Python/2.7/site-packages/pip-10.0.0b2-py2.7.egg/pip (python 2.7)</span><br><span class="line">➜  django pip --version</span><br><span class="line">pip 10.0.0b2 from /Library/Python/2.7/site-packages/pip-10.0.0b2-py2.7.egg/pip (python 2.7)</span><br><span class="line">➜  django pip3</span><br></pre></td></tr></table></figure><p>使用pip3 安装django pip3</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  django pip3 install Django==2.0.4</span><br><span class="line">Collecting Django==2.0.4</span><br><span class="line">  Cache entry deserialization failed, entry ignored</span><br><span class="line">  Downloading Django-2.0.4-py3-none-any.whl (7.1MB)</span><br><span class="line">    100% |████████████████████████████████| 7.1MB 267kB/s </span><br><span class="line">Collecting pytz (from Django==2.0.4)</span><br><span class="line">  Downloading pytz-2018.3-py2.py3-none-any.whl (509kB)</span><br><span class="line">    100% |████████████████████████████████| 512kB 2.5MB/s </span><br><span class="line">Installing collected packages: pytz, Django</span><br><span class="line">Successfully installed Django-2.0.4 pytz-2018.3</span><br></pre></td></tr></table></figure><p>成功安装django2.0.4版本。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mac 下搭建django2.0的开发环境，mac上默认的python版本是2.7，django需要的是python3以上的版本。所以我们需要再安装一个python3.5的版本。python2.7和python3.5可以共存的。直接安装就可以了。&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
      <category term="python" scheme="http://blog.ku-cat.com/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.ku-cat.com/tags/python/"/>
    
      <category term="django" scheme="http://blog.ku-cat.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Python 用hashlib求中文字符串的MD5值</title>
    <link href="http://blog.ku-cat.com/2018/04/03/python-md5/"/>
    <id>http://blog.ku-cat.com/2018/04/03/python-md5/</id>
    <published>2018-04-03T11:06:03.000Z</published>
    <updated>2018-04-03T11:11:09.219Z</updated>
    
    <content type="html"><![CDATA[<p>使用过hashlib库的遇到过以下的错误:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unicode-objects must be encoded before hashing</span><br></pre></td></tr></table></figure><p>意思是在进行md5哈希运算前，需要对数据进行编码。而且在不同版本的Python下还有所不同。hashlib.md5(data)函数中，data参数的类型应该是bytes。也就是说我们在进行hash前必须把数据转换成bytes类型，对于C程序而言似乎没有类似问题，指针强制转换就OK了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def md5(str):</span><br><span class="line">    m2 = hashlib.md5()</span><br><span class="line">    m2.update(str.encode(&apos;utf8&apos;))</span><br><span class="line">    return m2.hexdigest()</span><br></pre></td></tr></table></figure><p>先简单处理一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用过hashlib库的遇到过以下的错误:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;
      
    
    </summary>
    
      <category term="python" scheme="http://blog.ku-cat.com/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.ku-cat.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>django添加css等静态文件</title>
    <link href="http://blog.ku-cat.com/2018/04/03/python-django-static/"/>
    <id>http://blog.ku-cat.com/2018/04/03/python-django-static/</id>
    <published>2018-04-03T05:16:03.000Z</published>
    <updated>2018-04-13T04:01:30.170Z</updated>
    
    <content type="html"><![CDATA[<p>django 中访问 css 等静态文件必须以 url 的形式去访问，即必须配置 urls.py 的访问路径<br>首先在 settings.py 中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(os.path.dirname(os.path.dirname(__file__)), <span class="string">'static'</span>)</span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    (<span class="string">'css'</span>, os.path.join(STATIC_ROOT, <span class="string">'css'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)),</span><br><span class="line">    (<span class="string">'js'</span>, os.path.join(STATIC_ROOT, <span class="string">'js'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)),</span><br><span class="line">    (<span class="string">'image'</span>, os.path.join(STATIC_ROOT, <span class="string">'image'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)),</span><br><span class="line">    (<span class="string">'upload'</span>, os.path.join(STATIC_ROOT, <span class="string">'upload'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)),</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>其中__file__ 指的是调用 css 的html 文件所在的路径</p><p>然后在 urls.py 中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^static/(?P&lt;path&gt;.*)$'</span>, <span class="string">'django.views.static.serve'</span>, &#123;<span class="string">'document_root'</span>: settings.STATIC_ROOT&#125;)</span><br></pre></td></tr></table></figure><p>最后在 register.html 中引用 css 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"/static/css/register.css"</span>&gt;</span><br></pre></td></tr></table></figure><p>此处调用 django.views.static.serve 方法去解析具体的路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># …or create a new repository on the command line</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# test1"</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin git@github.com:BenVim/test1.git</span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="comment"># …or push an existing repository from the command line</span></span><br><span class="line">git remote add origin git@github.com:BenVim/test1.git</span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="comment"># …or import code from another repository</span></span><br><span class="line">You can initialize this repository with code from a Subversion, Mercurial, or TFS project.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;django 中访问 css 等静态文件必须以 url 的形式去访问，即必须配置 urls.py 的访问路径&lt;br&gt;首先在 settings.py 中添加：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="python" scheme="http://blog.ku-cat.com/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.ku-cat.com/tags/python/"/>
    
      <category term="django" scheme="http://blog.ku-cat.com/tags/django/"/>
    
  </entry>
  
</feed>

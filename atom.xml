<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一纸墨迹</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ku-cat.com/"/>
  <updated>2018-03-31T07:18:21.366Z</updated>
  <id>http://blog.ku-cat.com/</id>
  
  <author>
    <name>Ben</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pomelo框架学习（一）</title>
    <link href="http://blog.ku-cat.com/2018/03/31/pomelo-learn/"/>
    <id>http://blog.ku-cat.com/2018/03/31/pomelo-learn/</id>
    <published>2018-03-31T06:58:43.000Z</published>
    <updated>2018-03-31T07:18:21.366Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/multi-chat.png" alt=""></p><h3 id="一、安装pomelo"><a href="#一、安装pomelo" class="headerlink" title="一、安装pomelo"></a>一、安装pomelo</h3><p>pomelo是基于Node.js的，目前pomelo已经完全支持Windows、Linux、Mac等多种平台。</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li>确保你的机器可以上网,因为安装pomelo的过程需要从网上下载其依赖的包。</li><li>确保你的系统上已经要安装了Node，目前最新的Node提供了已经编译好的二进制安装包，包括Windows，Mac和Linux等平台。想省事的话，直接去这里下载对应的安装包，直接安装就好了。Node同时也提供了传统的从源码编译的方式安装，不过比起直接使用二进制的方式要麻烦。</li><li>确保你的系统中安装有python(2.5 &lt; version &lt; 3.0)以及C++的编译器。Node的源码主要由C++代码和JavaScript代码构成，但是却用gyp工具来做源码的项目管理，该工具采用Python语言写成的。对于非windows平台，一般都会预装Python以及C++编译工具；对于Windows系统，请确保你的Windows系统包含源码编译工具。在Windows平台上，Node.js采用gyp来生成Visual Studio Solution文件，最终通过VC++的编译器将其编译为二进制文件。</li><li><p>虽然pomelo是用Javascript写成，但是pomelo依赖的库中，有使用了C++语言写的扩展，因此安装pomelo的过程中会使用到C++编译器。 所以，在安装之前请确保你的Windows系统满足以下两个条件：</p><ul><li>python(2.5&lt;version&lt;3.0)。</li><li>VC++ 编译器，包含在Visual Studio 2010中（VC++ 2010 Express亦可）。对于windows8的用户，需要安装Microsoft Visual Studio C++ 2012。</li></ul></li><li><p>如果你使用的是Mac OS X系统, 则需要安装Xcode Command Line Tools或者Xcode的完整包以及make工具.</p></li></ul><h4 id="安装pomelo"><a href="#安装pomelo" class="headerlink" title="安装pomelo"></a>安装pomelo</h4><p>使用npm(node包管理工具)全局安装pomelo:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install pomelo -g</span><br></pre></td></tr></table></figure><p>可以通过如下命令下载源代码的方式安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/NetEase/pomelo.git</span><br><span class="line">$ cd pomelo</span><br><span class="line">$ npm install -g</span><br></pre></td></tr></table></figure><p>其中-g表示全局安装，关于npm的使用问题，可以参考npm的文档，里面有详细的npm使用的介绍。如果安装过程中没有报错误，说明安装成功。</p><p>windows下安装经验：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. node,vs2010 和 python(2.5&lt;v&lt;3) 都是32位或者都是64位的。</span><br><span class="line">2. 配置  PYTHON=d:\Python27\python.exe(设置成你自己的路径)。注意不是path里面,而是和path同级的，直接在全局或者当前用户下配置。</span><br><span class="line">3. 保证环境变量path里面有 %SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;</span><br><span class="line">  注： 这三个环境变量中貌似只有%SystemRoot%\system32这个环境变量有用，没具体试（没有他会报CreateProcessW找不到的错误)。</span><br><span class="line">4. 如果在命令行界面安装pomelo失败，可以在Visual Studio的命令行界面安装。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/multi-chat.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一、安装pomelo&quot;&gt;&lt;a href=&quot;#一、安装pomelo&quot; class=&quot;headerlink&quot; title=&quot;一、安装pomelo&quot;&gt;&lt;/a&gt;一、安装pomelo
      
    
    </summary>
    
      <category term="pomelo" scheme="http://blog.ku-cat.com/categories/pomelo/"/>
    
    
      <category term="pomelo" scheme="http://blog.ku-cat.com/tags/pomelo/"/>
    
  </entry>
  
  <entry>
    <title>扑克牌在计算机中的几种表示方法</title>
    <link href="http://blog.ku-cat.com/2018/03/31/poke/"/>
    <id>http://blog.ku-cat.com/2018/03/31/poke/</id>
    <published>2018-03-31T05:18:50.000Z</published>
    <updated>2018-03-31T05:59:31.766Z</updated>
    
    <content type="html"><![CDATA[<p>做棋牌类的游戏开发的时候，要考虑到数据存储的便捷性和数据的大小最小化，方便存储和传输，总之是越小越好。</p><p>对于扑克牌有两种表示方法：</p><ol><li>二进制存储法</li><li>map映射压缩法</li></ol><h3 id="1-二进制存储法"><a href="#1-二进制存储法" class="headerlink" title="1.二进制存储法"></a>1.二进制存储法</h3><p>首先对原始数据进行分析：扑克牌的主要属性是数值（A-K）和花色（黑、红、棉、方），A-K的数值最大是13。K 用二进制表示：1101 ，花色的表示更简单，黑桃0001、红桃 0010、梅花0011、方块 0100。也就是说数值和花色都可以用4位来表示。前4位为花色，后4位为数值，比如：黑桃A的二进制表示是黑桃 和 A 表示，即：00010001，16进制表示为11。又如：方块K的表示是 01001101，16进制表示为4D</p><p>根据上面的理论，我们可以生成52张牌，不包括大鬼和小鬼。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sendPlist</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $plist = [];</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt; <span class="number">14</span>; $i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> ($k = <span class="number">1</span>; $k &lt; <span class="number">5</span>; $k++) &#123;<span class="comment">//生成4个花色。例如：花色黑桃0001</span></span><br><span class="line">                $a       = $k &lt;&lt; <span class="number">4</span>;<span class="comment">//左移4位。花色黑桃左移4位，00010000</span></span><br><span class="line">                $c       = $i | $a;<span class="comment">//或操作，花色黑桃与数值A合并 00010001</span></span><br><span class="line">                $p       = dechex($c);<span class="comment">//转换成16进制：11</span></span><br><span class="line">                $plist[] = $p;<span class="comment">//保存到数组</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        shuffle($plist); <span class="comment">//打乱，洗牌。</span></span><br><span class="line">        <span class="keyword">return</span> $plist;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>16进制牌的数据的解析成数值和花色。解析是生成的反操作。先把16进制表示的字符串转换成二进制，使用函数hexdec()转换。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$num = hexdec($hexNum);</span><br></pre></td></tr></table></figure><p>转换后的数据是二进制的。比如：黑桃K的1十六进制是1D转换成二进制是00011101。下一步操作是把这个二进制结果右移4位，得到花色0001。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$suit = $num &gt;&gt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>数值部分使用二进制和15的二进制进行与操作。00011101 &amp; 00001111结果是1101</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$n = $num &amp; <span class="number">15</span>;</span><br></pre></td></tr></table></figure><p>所有转换代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberTransform</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">analysisWithHex</span><span class="params">($hexNum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_array($hexNum) || $hexNum==<span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        &#125;</span><br><span class="line">        $num = hexdec($hexNum);</span><br><span class="line">        $suit = $num &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        $n = $num &amp; <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'n'</span>=&gt;$n, <span class="string">'suit'</span>=&gt;$suit];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-map映射压缩法"><a href="#2-map映射压缩法" class="headerlink" title="2.map映射压缩法"></a>2.map映射压缩法</h3><p>map映射压缩法，这种方法优点数据理更小。更方便存储和传输，相对上面的二进制法更好一些。基本原理就是用整型数值表示牌，比如：黑桃A、红桃A、梅花A、方块A、黑桃2…对就的数值为1、2、3、4、5等等。这种原理比较简单。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扑克牌基本数据</span></span><br><span class="line"><span class="keyword">var</span> Pokers = &#123;</span><br><span class="line"></span><br><span class="line">    table: &#123;</span><br><span class="line">        <span class="comment">//大小王</span></span><br><span class="line">        <span class="number">1</span>:  &#123;<span class="attr">symbol</span>: <span class="string">"red_joker"</span>,  <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">num</span>: <span class="number">18</span>&#125;,</span><br><span class="line">        <span class="number">2</span>:  &#123;<span class="attr">symbol</span>: <span class="string">"black_joker"</span>,  <span class="attr">type</span>: <span class="number">3</span>, <span class="attr">num</span>: <span class="number">17</span>&#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//黑桃</span></span><br><span class="line">        <span class="number">3</span>:  &#123;<span class="attr">suit</span>: <span class="string">"spade"</span>, <span class="attr">symbol</span>: <span class="string">'3'</span>, <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">num</span>: <span class="number">3</span>&#125;,</span><br><span class="line">        <span class="number">4</span>:  &#123;<span class="attr">suit</span>: <span class="string">"spade"</span>, <span class="attr">symbol</span>: <span class="string">'4'</span>, <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">num</span>: <span class="number">4</span>&#125;,</span><br><span class="line">        <span class="number">5</span>:  &#123;<span class="attr">suit</span>: <span class="string">"spade"</span>, <span class="attr">symbol</span>: <span class="string">'5'</span>, <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">num</span>: <span class="number">5</span>&#125;,</span><br><span class="line">        <span class="number">6</span>:  &#123;<span class="attr">suit</span>: <span class="string">"spade"</span>, <span class="attr">symbol</span>: <span class="string">'6'</span>, <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">num</span>: <span class="number">6</span>&#125;,</span><br><span class="line">        <span class="number">7</span>:  &#123;<span class="attr">suit</span>: <span class="string">"spade"</span>, <span class="attr">symbol</span>: <span class="string">'7'</span>, <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">num</span>: <span class="number">7</span>&#125;,</span><br><span class="line">        <span class="number">8</span>:  &#123;<span class="attr">suit</span>: <span class="string">"spade"</span>, <span class="attr">symbol</span>: <span class="string">'8'</span>, <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">num</span>: <span class="number">8</span>&#125;,</span><br><span class="line">        <span class="number">9</span>:  &#123;<span class="attr">suit</span>: <span class="string">"spade"</span>, <span class="attr">symbol</span>: <span class="string">'9'</span>, <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">num</span>: <span class="number">9</span>&#125;,</span><br><span class="line">        <span class="number">10</span>: &#123;<span class="attr">suit</span>: <span class="string">"spade"</span>, <span class="attr">symbol</span>: <span class="string">'10'</span>, <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">num</span>: <span class="number">10</span>&#125;,</span><br><span class="line">        <span class="number">11</span>: &#123;<span class="attr">suit</span>: <span class="string">"spade"</span>, <span class="attr">symbol</span>: <span class="string">'J'</span>, <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">num</span>: <span class="number">11</span>&#125;,</span><br><span class="line">        <span class="number">12</span>: &#123;<span class="attr">suit</span>: <span class="string">"spade"</span>, <span class="attr">symbol</span>: <span class="string">'Q'</span>, <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">num</span>: <span class="number">12</span>&#125;,</span><br><span class="line">        <span class="number">13</span>: &#123;<span class="attr">suit</span>: <span class="string">"spade"</span>, <span class="attr">symbol</span>: <span class="string">'K'</span>, <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">num</span>: <span class="number">13</span>&#125;,</span><br><span class="line">        <span class="number">14</span>: &#123;<span class="attr">suit</span>: <span class="string">"spade"</span>, <span class="attr">symbol</span>: <span class="string">'A'</span>, <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">num</span>: <span class="number">14</span>&#125;,</span><br><span class="line">        <span class="number">15</span>: &#123;<span class="attr">suit</span>: <span class="string">"spade"</span>, <span class="attr">symbol</span>: <span class="string">'2'</span>, <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">num</span>: <span class="number">16</span>&#125;,</span><br><span class="line">    </span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>使用map映射压缩法，更简单明了，而且数据量会小于上面的方法。建议使用map映射压缩法做扑克牌的表示方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做棋牌类的游戏开发的时候，要考虑到数据存储的便捷性和数据的大小最小化，方便存储和传输，总之是越小越好。&lt;/p&gt;
&lt;p&gt;对于扑克牌有两种表示方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;二进制存储法&lt;/li&gt;
&lt;li&gt;map映射压缩法&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-二进制存储
      
    
    </summary>
    
      <category term="algorithm" scheme="http://blog.ku-cat.com/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http://blog.ku-cat.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Go 实现socket服务</title>
    <link href="http://blog.ku-cat.com/2018/03/31/go-scoket/"/>
    <id>http://blog.ku-cat.com/2018/03/31/go-scoket/</id>
    <published>2018-03-31T04:09:23.000Z</published>
    <updated>2018-03-31T04:15:15.147Z</updated>
    
    <content type="html"><![CDATA[<p>用Go语言实现简单的sokcet服务。<br>1.串行服务端；<br>　　当客户端链接过来的时候，我们服务端可以给客户端回复特定的字符串等等。我们就以下面这段代码为例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    addr := <span class="string">"0.0.0.0:8080"</span> <span class="comment">//表示监听本地所有ip的8080端口，也可以这样写：addr := ":8080"</span></span><br><span class="line">    listener,err := net.Listen(<span class="string">"tcp"</span>,addr) <span class="comment">//使用协议是tcp，监听的地址是addr</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> listener.Close() <span class="comment">//关闭监听的端口</span></span><br><span class="line">    <span class="keyword">for</span>  &#123;</span><br><span class="line">        conn,err := listener.Accept() <span class="comment">//用conn接收链接</span></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">        conn.Write([]<span class="keyword">byte</span>(<span class="string">"Yinzhengjie\n"</span>))  <span class="comment">//通过conn的wirte方法将这些数据返回给客户端。</span></span><br><span class="line">        conn.Write([]<span class="keyword">byte</span>(<span class="string">"hello Golang\n"</span>))</span><br><span class="line">        time.Sleep(time.Minute) <span class="comment">//在结束这个链接之前需要睡一分钟在结束当前循环。</span></span><br><span class="line">        conn.Close() <span class="comment">//与客户端断开连接。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.并发服务端；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handle_conn</span><span class="params">(conn net.Conn)</span></span> &#123; <span class="comment">//这个是在处理客户端会阻塞的代码。</span></span><br><span class="line">    conn.Write([]<span class="keyword">byte</span>(<span class="string">"Yinzhengjie\n"</span>))  <span class="comment">//通过conn的wirte方法将这些数据返回给客户端。</span></span><br><span class="line">    conn.Write([]<span class="keyword">byte</span>(<span class="string">"尹正杰是一个好男孩！\n"</span>))</span><br><span class="line">    time.Sleep(time.Minute)</span><br><span class="line">    conn.Close() <span class="comment">//与客户端断开连接。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    addr := <span class="string">"0.0.0.0:8080"</span> <span class="comment">//表示监听本地所有ip的8080端口，也可以这样写：addr := ":8080"</span></span><br><span class="line">    listener,err := net.Listen(<span class="string">"tcp"</span>,addr)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> listener.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>  &#123;</span><br><span class="line">        conn,err := listener.Accept() <span class="comment">//用conn接收链接</span></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">go</span> Handle_conn(conn)  <span class="comment">//开启多个协程。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用Go语言实现简单的sokcet服务。&lt;br&gt;1.串行服务端；&lt;br&gt;　　当客户端链接过来的时候，我们服务端可以给客户端回复特定的字符串等等。我们就以下面这段代码为例子：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="go" scheme="http://blog.ku-cat.com/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.ku-cat.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>sql语句的分组查询</title>
    <link href="http://blog.ku-cat.com/2018/03/31/sql/"/>
    <id>http://blog.ku-cat.com/2018/03/31/sql/</id>
    <published>2018-03-31T03:32:25.000Z</published>
    <updated>2018-03-31T04:06:48.679Z</updated>
    
    <content type="html"><![CDATA[<p>分组查询 按分组统计结果排序，然后再过滤统计结果的数量，然后分页</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> t1.id,<span class="keyword">count</span>(*) <span class="keyword">as</span> total, t1.<span class="string">`player_num`</span></span><br><span class="line"><span class="keyword">from</span> house t1 <span class="keyword">left</span> <span class="keyword">join</span> player t2 <span class="keyword">on</span> t1.id=t2.house_id</span><br><span class="line"><span class="keyword">group</span>  <span class="keyword">by</span> t1.id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> total <span class="keyword">desc</span>) a <span class="keyword">where</span> total &lt; player_num;</span><br></pre></td></tr></table></figure><p>增加条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> t1.id,<span class="keyword">count</span>(*) <span class="keyword">as</span> total, t1.<span class="string">`player_num`</span>, t1.<span class="string">`union_id`</span></span><br><span class="line"><span class="keyword">from</span> house t1 <span class="keyword">left</span> <span class="keyword">join</span> player t2 <span class="keyword">on</span> t1.id=t2.house_id </span><br><span class="line"><span class="keyword">where</span> t1.union_id=<span class="number">40</span></span><br><span class="line"><span class="keyword">group</span>  <span class="keyword">by</span> t1.id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> total <span class="keyword">desc</span>) a </span><br><span class="line"><span class="keyword">where</span> total&lt;player_num;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分组查询 按分组统计结果排序，然后再过滤统计结果的数量，然后分页&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa
      
    
    </summary>
    
      <category term="sql" scheme="http://blog.ku-cat.com/categories/sql/"/>
    
    
      <category term="sql" scheme="http://blog.ku-cat.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.ku-cat.com/2018/03/31/hello-world/"/>
    <id>http://blog.ku-cat.com/2018/03/31/hello-world/</id>
    <published>2018-03-31T01:31:33.587Z</published>
    <updated>2018-03-31T01:31:33.587Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
